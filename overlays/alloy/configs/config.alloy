// based on https://grafana.com/docs/alloy/latest/collect/logs-in-kubernetes/#pods-logs

discovery.kubernetes "pod" {
  role = "pod"
}

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app"]
    regex = "(.+)"
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    regex = "(.+)"
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_openanalytics_eu_sp_proxy_id"]
    target_label = "sp_proxy_id"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_annotation_openanalytics_eu_sp_realm_id"]
    regex = "(.+)"
    target_label = "sp_realm_id"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_openanalytics_eu_sp_realm_id"]
    regex = "(.+)"
    target_label = "sp_realm_id"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_openanalytics_eu_proxy_sp_instance"]
    regex = "(.+)"
    target_label = "sp_instance"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_openanalytics_eu_sp_instance"]
    regex = "(.+)"
    target_label = "sp_instance"
  }
}

loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  forward_to = [loki.write.default.receiver]

  stage.multiline {
    firstline =".* (DEBUG)|(INFO)|(ERROR)|(WARN)"
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
